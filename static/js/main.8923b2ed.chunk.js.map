{"version":3,"sources":["logo.svg","i18n sync /^/.//.*/.po/.json$","cookie.js","components/Hero.js","components/DateInput.js","components/DateDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./ja.po.json","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","get","key","cookie","document","split","c","find","_ref","slicedToArray","trim","set","value","concat","Hero","react_default","a","createElement","class","t","_templateObject","Component","DateInput","handleChange","yearInput","Number","parseInt","target","japaneseYearInfo","japaneseYear","isInteger","_this","props","onInputChange","names","english","startYear","type","onChange","this","DateDisplay","state","dateOutput","handleInputChange","date","setState","components_DateInput","App","components_Hero","components_DateDisplay","Boolean","window","location","hostname","match","d","__webpack_exports__","saveLocale","LOCALE_COOKIE","locale","translationsObj","require","addLocale","useLocale","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qECAxC,IAAAC,EAAA,CACAC,eAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAL,EAAAM,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAJ,EAAAG,GACA,KAAAC,EAAA,IACA,IAAAE,EAAA,IAAAC,MAAA,uBAAAJ,EAAA,KAEA,MADAG,EAAAE,KAAA,mBACAF,EAEA,OAAAF,EAEAF,EAAAO,KAAA,WACA,OAAAC,OAAAD,KAAAT,IAEAE,EAAAS,QAAAN,EACAT,EAAAC,QAAAK,EACAA,EAAAE,GAAA,4uBCvBaQ,EAAM,SAAAC,GACjB,IAAMC,EAASC,SAASD,OACrBE,MAAM,KACNhB,IAAI,SAAAiB,GAAC,OAAIA,EAAED,MAAM,OACjBE,KAAK,SAAAC,GAAA,OAAAT,OAAAU,EAAA,EAAAV,CAAAS,EAAA,MAA6BE,SAAWR,IAChD,OAAOC,GAAUA,EAAO,IAGbQ,EAAM,SAACT,EAAKU,GACvBR,SAASD,OAAT,GAAAU,OAAqBX,EAArB,KAAAW,OAA4BD,kJCKfE,mLATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,QACTH,EAAAC,EAAAC,cAAA,UAAKE,YAALC,MACAL,EAAAC,EAAAC,cAAA,8EALWI,qBC8BJC,6MAxBbC,aAAe,SAAA5B,GACb,IAAM6B,EAAYC,OAAOC,SAAS/B,EAAEgC,OAAOf,OACrCgB,EAAmBC,uBAAaL,GAElCI,GAAoBH,OAAOK,UAAUN,GACvCO,EAAKC,MAAMC,cAAX,GAAApB,OACKe,EAAiBM,MAAMC,QAD5B,UAAAtB,OAC4CW,EACxCI,EAAiBQ,UACjB,IAEKZ,EACTO,EAAKC,MAAMC,cACT,mDAGFF,EAAKC,MAAMC,cAAc,gGAK3B,OAAOlB,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,SAASC,SAAUC,KAAKhB,sBAzBvBF,aCkBTmB,6MAlBbC,MAAQ,CACNC,WAAY,MAGdC,kBAAoB,SAAAC,GAClBb,EAAKc,SAAS,CAAEH,WAAYE,6EAI5B,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACTH,EAAAC,EAAAC,cAAA,UAAKsB,KAAKE,MAAMC,YAAc,uBAC9B3B,EAAAC,EAAAC,cAAC6B,EAAD,CAAWb,cAAeM,KAAKI,4BAbbtB,aCkBX0B,mLAbX,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,UAAQC,MAAM,WACdH,EAAAC,EAAAC,cAAA,QAAMC,MAAM,QACVH,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFlC,EAAAC,EAAAC,cAAA,UAAQC,MAAM,mBATJG,aCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBNnE,EAAAoE,EAAAC,EAAA,+BAAAC,IAQA,IAAMC,EAAgB,WAMf,SAASD,EAAWE,GACzBxD,EAAWuD,EAAeC,GAG5B,IAAMA,EAPGxD,EAAWuD,IAAkB,KAStC,GAAe,OAAXC,EAAiB,CACnB,IAAMC,EAAkBC,MAAQ,KAAAhD,OAAU8C,EAAX,aAC/BG,oBAAUH,EAAQC,GAClBG,oBAAUJ,GAGZK,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAS9D,SAAS+D,eAAe,SDuG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8923b2ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./ja.po.json\": 24\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","export const get = key => {\n  const cookie = document.cookie\n    .split(';')\n    .map(c => c.split('='))\n    .find(([cookieName]) => cookieName.trim() === key);\n  return cookie && cookie[1];\n};\n\nexport const set = (key, value) => {\n  document.cookie = `${key}=${value}`;\n};\n","import React, { Component } from 'react';\nimport { t } from 'ttag';\n\nclass Hero extends Component {\n  render() {\n    return (\n      <div class=\"hero\">\n        <h1>{t`Nengo`}</h1>\n        <h3>Converts Gregorian years into traditional Japanese years</h3>\n      </div>\n    );\n  }\n}\n\nexport default Hero;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { japaneseYear } from 'nengo';\n\nclass DateInput extends Component {\n  static propTypes = {\n    onInputChange: PropTypes.func\n  };\n\n  handleChange = e => {\n    const yearInput = Number.parseInt(e.target.value);\n    const japaneseYearInfo = japaneseYear(yearInput);\n\n    if (japaneseYearInfo && Number.isInteger(yearInput)) {\n      this.props.onInputChange(\n        `${japaneseYearInfo.names.english} Year ${yearInput -\n          japaneseYearInfo.startYear +\n          1}`\n      );\n    } else if (yearInput) {\n      this.props.onInputChange(\n        'The year you have entered is not yet supported.'\n      );\n    } else {\n      this.props.onInputChange('Please enter a year');\n    }\n  };\n\n  render() {\n    return <input type=\"number\" onChange={this.handleChange} />;\n  }\n}\n\nexport default DateInput;\n","import React, { Component } from 'react';\nimport DateInput from './DateInput';\n\nclass DateDisplay extends Component {\n  state = {\n    dateOutput: ''\n  };\n\n  handleInputChange = date => {\n    this.setState({ dateOutput: date });\n  };\n\n  render() {\n    return (\n      <div class=\"date-display\">\n        <h2>{this.state.dateOutput || 'Please enter a year'}</h2>\n        <DateInput onInputChange={this.handleInputChange} />\n      </div>\n    );\n  }\n}\n\nexport default DateDisplay;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './styles/app.scss';\nimport Hero from './components/Hero';\nimport DateDisplay from './components/DateDisplay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div class=\"container\">\n        <header class=\"header\" />\n        <main class=\"main\">\n          <Hero />\n          <DateDisplay />\n        </main>\n        <footer class=\"footer\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { addLocale, useLocale } from 'ttag';\nimport * as cookie from './cookie';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst LOCALE_COOKIE = '__locale';\n\nfunction getLocale() {\n  return cookie.get(LOCALE_COOKIE) || 'en';\n}\n\nexport function saveLocale(locale) {\n  cookie.set(LOCALE_COOKIE, locale);\n}\n\nconst locale = getLocale();\n\nif (locale !== 'en') {\n  const translationsObj = require(`./i18n/${locale}.po.json`);\n  addLocale(locale, translationsObj);\n  useLocale(locale);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}